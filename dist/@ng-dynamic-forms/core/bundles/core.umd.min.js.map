{"version":3,"file":"core.umd.min.js","sources":["../../../es5/core/src/utils/core.utils.ts","../../../es5/core/src/component/dynamic-form-control.component.ts","../../../es5/core/src/component/dynamic-form-array.component.ts","../../../es5/core/src/component/dynamic-form-control.event.ts","../../../es5/core/src/component/dynamic-form-component.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../../node_modules/rxjs/src/internal/observable/of.ts","../../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../../node_modules/rxjs/src/internal/operators/map.ts","../../../es5/core/src/decorator/serializable.decorator.ts","../../../es5/core/src/model/dynamic-form-control.model.ts","../../../es5/core/src/model/dynamic-form-value-control.model.ts","../../../es5/core/src/model/form-array/dynamic-form-array.model.ts","../../../es5/core/src/model/dynamic-check-control.model.ts","../../../es5/core/src/model/checkbox/dynamic-checkbox.model.ts","../../../es5/core/src/utils/autofill.utils.ts","../../../es5/core/src/model/dynamic-input-control.model.ts","../../../es5/core/src/utils/json.utils.ts","../../../../node_modules/rxjs/src/internal/operators/tap.ts","../../../es5/core/src/model/input/dynamic-input.model.ts","../../../es5/core/src/model/misc/dynamic-form-control-relation.model.ts","../../../es5/core/src/utils/relation.utils.ts","../../../es5/core/src/component/dynamic-form-control-container.component.ts","../../../es5/core/src/component/dynamic-templateable-form-control.component.ts","../../../es5/core/src/directive/dynamic-id.directive.ts","../../../es5/core/src/directive/dynamic-list.directive.ts","../../../es5/core/src/directive/dynamic-template.directive.ts","../../../es5/core/src/model/dynamic-date-control.model.ts","../../../es5/core/src/model/dynamic-file-control.model.ts","../../../es5/core/src/model/dynamic-option-control.model.ts","../../../es5/core/src/model/form-group/dynamic-form-group.model.ts","../../../es5/core/src/model/checkbox/dynamic-checkbox-group.model.ts","../../../es5/core/src/model/colorpicker/dynamic-colorpicker.model.ts","../../../es5/core/src/model/datepicker/dynamic-datepicker.model.ts","../../../es5/core/src/model/editor/dynamic-editor.model.ts","../../../es5/core/src/model/file-upload/dynamic-file-upload.model.ts","../../../es5/core/src/model/radio/dynamic-radio-group.model.ts","../../../es5/core/src/model/rating/dynamic-rating.model.ts","../../../es5/core/src/model/select/dynamic-select.model.ts","../../../es5/core/src/model/slider/dynamic-slider.model.ts","../../../es5/core/src/model/switch/dynamic-switch.model.ts","../../../es5/core/src/model/textarea/dynamic-textarea.model.ts","../../../es5/core/src/model/timepicker/dynamic-timepicker.model.ts","../../../es5/core/src/service/dynamic-form-validation.service.ts","../../../es5/core/src/service/dynamic-form.service.ts","../../../es5/core/src/service/dynamic-form-layout.service.ts","../../../es5/core/src/core.module.ts"],"sourcesContent":["import { Observable } from \"rxjs\";\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n    return typeof value === \"boolean\";\r\n}\r\n\r\nexport function isFunction(value: any): value is Function {\r\n    return typeof value === \"function\";\r\n}\r\n\r\nexport function isNumber(value: any): value is number {\r\n    return typeof value === \"number\";\r\n}\r\n\r\nexport function isObject(value: any): value is object {\r\n    return typeof value === \"object\" && value !== null;\r\n}\r\n\r\nexport function isObservable(value: any): value is Observable<any> {\r\n    return !!value && isFunction(value.lift) && isFunction(value.subscribe);\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n    return typeof value === \"string\";\r\n}\r\n","import { EventEmitter } from \"@angular/core\";\r\nimport { FormControl, FormGroup } from \"@angular/forms\";\r\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\r\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control.event\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport { DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\r\nimport {\r\n    DynamicFormControlLayout,\r\n    DynamicFormControlLayoutContext,\r\n    DynamicFormControlLayoutPlace\r\n} from \"../model/misc/dynamic-form-control-layout.model\";\r\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\r\nimport {\r\n    DynamicFormLayout,\r\n    DynamicFormLayoutService,\r\n    DynamicFormControlTemplates\r\n} from \"../service/dynamic-form-layout.service\";\r\nimport { isString } from \"../utils/core.utils\";\r\n\r\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\r\n\r\n    private _hasFocus: boolean = false;\r\n\r\n    bindId: boolean;\r\n    group: FormGroup;\r\n    layout: DynamicFormLayout;\r\n    model: DynamicFormControlModel;\r\n    templates: DynamicFormControlTemplates;\r\n\r\n    blur: EventEmitter<any>;\r\n    change: EventEmitter<any>;\r\n    customEvent: EventEmitter<DynamicFormControlCustomEvent> | undefined;\r\n    focus: EventEmitter<any>;\r\n\r\n    protected constructor(protected layoutService: DynamicFormLayoutService,\r\n                          protected validationService: DynamicFormValidationService) {}\r\n\r\n    get control(): FormControl {\r\n        return this.group.get(this.model.id) as FormControl;\r\n    }\r\n\r\n    get errorMessages(): string[] {\r\n        return this.validationService.createErrorMessages(this.control, this.model);\r\n    }\r\n\r\n    get hasFocus(): boolean {\r\n        return this._hasFocus;\r\n    }\r\n\r\n    get isInvalid(): boolean {\r\n        return this.control.invalid;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        return this.control.valid;\r\n    }\r\n\r\n    get showErrorMessages(): boolean {\r\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\r\n    }\r\n\r\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\r\n\r\n        let controlLayout = (this.layout && this.layout[model.id]) || model.layout as DynamicFormControlLayout;\r\n\r\n        return this.layoutService.getClass(controlLayout, context, place);\r\n    }\r\n\r\n    onBlur($event: any) {\r\n\r\n        if ($event instanceof Event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this._hasFocus = false;\r\n        this.blur.emit($event);\r\n    }\r\n\r\n    onChange($event: any) {\r\n\r\n        if ($event instanceof Event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.change.emit($event);\r\n    }\r\n\r\n    onEmbeddedCheckboxChange($event: Event, model: DynamicCheckboxModel) {\r\n\r\n        this.onChange($event);\r\n\r\n        model.valueUpdates.next(($event.target as HTMLInputElement).checked);\r\n    }\r\n\r\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\r\n\r\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlCustomEvent>;\r\n\r\n        if (bypass) {\r\n\r\n            emitter.emit($event);\r\n\r\n        } else if (isString(type)) {\r\n\r\n            emitter.emit({customEvent: $event, customEventType: type});\r\n        }\r\n    }\r\n\r\n    onFocus($event: any) {\r\n\r\n        if ($event instanceof Event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this._hasFocus = true;\r\n        this.focus.emit($event);\r\n    }\r\n}","import { QueryList } from \"@angular/core\";\r\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\r\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\r\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\r\n\r\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\r\n\r\n    model: DynamicFormArrayModel;\r\n    templates: QueryList<DynamicTemplateDirective> | undefined;\r\n\r\n    get startTemplate(): DynamicTemplateDirective | undefined {\r\n        return this.layoutService.getStartTemplate(this.model, this.templates);\r\n    }\r\n\r\n    get endTemplate(): DynamicTemplateDirective | undefined {\r\n        return this.layoutService.getEndTemplate(this.model, this.templates);\r\n    }\r\n}","import { FormControl, FormGroup } from \"@angular/forms\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\r\nimport { isObject } from \"../utils/core.utils\";\r\n\r\nexport enum DynamicFormControlEventType {Blur = \"blur\", Change = \"change\", Custom = \"custom\", Focus = \"focus\"}\r\n\r\nexport interface DynamicFormControlEvent {\r\n\r\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\r\n    context: DynamicFormArrayGroupModel | null;\r\n    control: FormControl;\r\n    group: FormGroup;\r\n    model: DynamicFormControlModel;\r\n    type: string;\r\n}\r\n\r\nexport interface DynamicFormControlCustomEvent {\r\n\r\n    customEvent: any;\r\n    customEventType: string;\r\n}\r\n\r\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\r\n    return isObject($event) && $event.hasOwnProperty(\"$event\");\r\n}","import { EventEmitter, QueryList } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\r\nimport { DynamicFormControlEvent, DynamicFormControlEventType } from \"./dynamic-form-control.event\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport {\r\n    DynamicFormControlLayout,\r\n    DynamicFormControlLayoutContext,\r\n    DynamicFormControlLayoutPlace\r\n} from \"../model/misc/dynamic-form-control-layout.model\";\r\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\r\nimport { DynamicFormService } from \"../service/dynamic-form.service\";\r\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\r\n\r\nexport abstract class DynamicFormComponent {\r\n\r\n    formGroup: FormGroup;\r\n    formModel: DynamicFormControlModel[];\r\n    formLayout: DynamicFormLayout;\r\n\r\n    components: QueryList<DynamicFormControlContainerComponent>;\r\n    templates: QueryList<DynamicTemplateDirective>;\r\n\r\n    blur: EventEmitter<DynamicFormControlEvent>;\r\n    change: EventEmitter<DynamicFormControlEvent>;\r\n    focus: EventEmitter<DynamicFormControlEvent>;\r\n    customEvent: EventEmitter<DynamicFormControlEvent>;\r\n\r\n    protected constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {}\r\n\r\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\r\n        return model.id;\r\n    }\r\n\r\n    getClass(model: DynamicFormControlModel, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\r\n\r\n        let controlLayout = this.layoutService.findById(model.id, this.formLayout) || model.layout as DynamicFormControlLayout;\r\n\r\n        return this.layoutService.getClass(controlLayout, context, place);\r\n    }\r\n\r\n    onEvent($event: DynamicFormControlEvent, type: string) {\r\n\r\n        switch (type) {\r\n\r\n            case DynamicFormControlEventType.Blur:\r\n                this.blur.emit($event);\r\n                break;\r\n\r\n            case DynamicFormControlEventType.Change:\r\n                this.change.emit($event);\r\n                break;\r\n\r\n            case DynamicFormControlEventType.Focus:\r\n                this.focus.emit($event);\r\n                break;\r\n\r\n            case DynamicFormControlEventType.Custom:\r\n                this.customEvent.emit($event);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using {@link index/EMPTY} constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```javascript\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```javascript\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","declare let Reflect: any;\r\n\r\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\r\n\r\nexport interface SerializableProperty {\r\n\r\n    key: string;\r\n    name: string;\r\n}\r\n\r\nexport function serializable(name?: string): (target: any, key: string) => void {\r\n\r\n    return function (target, key) {\r\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key: key, name: name || key}, target, key);\r\n    };\r\n}\r\n\r\nexport function getSerializables(target: any): SerializableProperty[] {\r\n\r\n    let serializables = [];\r\n\r\n    for (let key in target) {\r\n\r\n        let metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\r\n\r\n        if (metadata) {\r\n            serializables.push(metadata);\r\n        }\r\n    }\r\n\r\n    return serializables;\r\n}\r\n\r\nexport function serialize(target: any, prototype?: any): Object {\r\n\r\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\r\n\r\n        prev[prop.name] = target[prop.key];\r\n\r\n        return prev;\r\n\r\n    }, {});\r\n}","import { FormHooks } from \"@angular/forms/src/model\";\r\nimport { Subject } from \"rxjs\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\r\nimport { DynamicFormControlRelationGroup } from \"./misc/dynamic-form-control-relation.model\";\r\nimport { DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\r\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\r\nimport { isBoolean, isObject, isString } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicFormControlModelConfig {\r\n\r\n    asyncValidators?: DynamicValidatorsConfig;\r\n    disabled?: boolean;\r\n    errorMessages?: DynamicValidatorsConfig;\r\n    hidden?: boolean;\r\n    id: string;\r\n    label?: string;\r\n    labelTooltip?: string;\r\n    controlTooltip?: string;\r\n    name?: string;\r\n    relation?: DynamicFormControlRelationGroup[];\r\n    updateOn?: FormHooks;\r\n    validators?: DynamicValidatorsConfig;\r\n}\r\n\r\nexport abstract class DynamicFormControlModel implements DynamicPathable {\r\n\r\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\r\n    @serializable(\"disabled\") _disabled: boolean;\r\n    disabledUpdates: Subject<boolean>;\r\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\r\n    @serializable() hidden: boolean;\r\n    @serializable() id: string;\r\n    @serializable() label: string | null;\r\n    @serializable() labelTooltip: string | null;\r\n    @serializable() controlTooltip: string | null;\r\n    @serializable() layout: DynamicFormControlLayout | null;\r\n    @serializable() name: string;\r\n    parent: DynamicPathable | null = null;\r\n    @serializable() relation: DynamicFormControlRelationGroup[];\r\n    @serializable() updateOn: FormHooks | null;\r\n    @serializable() validators: DynamicValidatorsConfig | null;\r\n\r\n    abstract readonly type: string;\r\n\r\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\r\n\r\n        this.asyncValidators = config.asyncValidators || null;\r\n        this.errorMessages = config.errorMessages || null;\r\n        this.hidden = isBoolean(config.hidden) ? config.hidden : false;\r\n        this.id = config.id;\r\n        this.label = config.label || null;\r\n        this.labelTooltip = config.labelTooltip || null;\r\n        this.controlTooltip = config.controlTooltip || null;\r\n        this.layout = layout;\r\n        this.name = config.name || config.id;\r\n        this.relation = Array.isArray(config.relation) ? config.relation : [];\r\n        this.updateOn = isString(config.updateOn) ? config.updateOn : null;\r\n        this.validators = config.validators || null;\r\n\r\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\r\n        this.disabledUpdates = new Subject<boolean>();\r\n        this.disabledUpdates.subscribe(disabled => this.disabled = disabled);\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    get hasErrorMessages(): boolean {\r\n        return isObject(this.errorMessages);\r\n    }\r\n\r\n    toJSON() {\r\n        return serialize(this);\r\n    }\r\n}","import { Subject } from \"rxjs\";\r\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../decorator/serializable.decorator\";\r\nimport { isBoolean, isObject } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\r\n\r\n    additional?: { [key: string]: any };\r\n    hint?: string;\r\n    required?: boolean;\r\n    tabIndex?: number;\r\n    value?: T;\r\n}\r\n\r\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\r\n\r\n    @serializable() additional: { [key: string]: any } | null;\r\n    @serializable() hint: string | null;\r\n    @serializable() required: boolean;\r\n    @serializable() tabIndex: number | null;\r\n    @serializable(\"value\") _value: T | null;\r\n    valueUpdates: Subject<T>;\r\n\r\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.additional = isObject(config.additional) ? config.additional : null;\r\n        this.hint = config.hint || null;\r\n        this.required = isBoolean(config.required) ? config.required : false;\r\n        this.tabIndex = config.tabIndex || null;\r\n\r\n        this.value = config.value !== null && config.value !== undefined ? config.value : null;\r\n        this.valueUpdates = new Subject<T>();\r\n        this.valueUpdates.subscribe((value: T) => this.value = value);\r\n    }\r\n\r\n    set value(value: T | null) {\r\n        this._value = value;\r\n    }\r\n\r\n    get value(): T | null {\r\n        return this._value;\r\n    }\r\n\r\n    getAdditional(key: string, defaultValue: any = null): any {\r\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\r\n    }\r\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\r\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\r\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\r\nimport { isFunction, isNumber } from \"../../utils/core.utils\";\r\n\r\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\r\n\r\n    $implicit: DynamicFormArrayGroupModel;\r\n    context: DynamicFormArrayModel;\r\n    @serializable() group: DynamicFormControlModel[];\r\n    @serializable() index: number;\r\n\r\n    constructor(context: DynamicFormArrayModel, group: DynamicFormControlModel[] = [], index: number = -1) {\r\n\r\n        this.$implicit = this;\r\n        this.context = context;\r\n        this.group = group;\r\n        this.index = index;\r\n    }\r\n\r\n    get parent(): DynamicFormArrayModel {\r\n        return this.context;\r\n    }\r\n\r\n    get(index: number): DynamicFormControlModel {\r\n        return this.group[index];\r\n    }\r\n\r\n    toJSON() {\r\n        return serialize(this);\r\n    }\r\n}\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\r\n\r\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\r\n\r\n    groupAsyncValidators?: DynamicValidatorsConfig;\r\n    groupFactory?: () => DynamicFormControlModel[];\r\n    groupValidators?: DynamicValidatorsConfig;\r\n    groups?: DynamicFormArrayGroupModel[] | null;\r\n    initialCount?: number;\r\n}\r\n\r\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\r\n\r\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\r\n    groupFactory: () => DynamicFormControlModel[];\r\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\r\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\r\n    @serializable() initialCount: number;\r\n\r\n    @serializable() readonly groupPrototype: DynamicFormControlModel[]; // only to recreate model from JSON\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\r\n\r\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        if (isFunction(config.groupFactory)) {\r\n            this.groupFactory = config.groupFactory;\r\n        } else {\r\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\r\n        }\r\n\r\n        this.groupAsyncValidators = config.groupAsyncValidators || null;\r\n        this.groupPrototype = this.groupFactory();\r\n        this.groupValidators = config.groupValidators || null;\r\n        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;\r\n\r\n        if (Array.isArray(config.groups)) {\r\n\r\n            config.groups.forEach((arrayGroup, index) => {\r\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\r\n            });\r\n\r\n        } else {\r\n\r\n            for (let index = 0; index < this.initialCount; index++) {\r\n                this.addGroup();\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateGroupIndex(): void {\r\n        this.groups.forEach((group, index) => group.index = index);\r\n    }\r\n\r\n    get size(): number {\r\n        return this.groups.length;\r\n    }\r\n\r\n    get(index: number): DynamicFormArrayGroupModel {\r\n        return this.groups[index];\r\n    }\r\n\r\n    addGroup(): DynamicFormArrayGroupModel {\r\n        return this.insertGroup(this.groups.length);\r\n    }\r\n\r\n    insertGroup(index: number): DynamicFormArrayGroupModel {\r\n\r\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\r\n\r\n        this.groups.splice(index, 0, group);\r\n        this.updateGroupIndex();\r\n\r\n        return group;\r\n    }\r\n\r\n    moveGroup(index: number, step: number): void {\r\n\r\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\r\n        this.updateGroupIndex();\r\n    }\r\n\r\n    removeGroup(index: number): void {\r\n\r\n        this.groups.splice(index, 1);\r\n        this.updateGroupIndex();\r\n    }\r\n}","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../decorator/serializable.decorator\";\r\nimport { isBoolean } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\r\n\r\n    labelPosition?: string;\r\n}\r\n\r\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\r\n\r\n    @serializable() labelPosition: string | null;\r\n\r\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.labelPosition = config.labelPosition || null;\r\n        this.value = isBoolean(this.value) ? this.value : false;\r\n    }\r\n\r\n    get checked(): boolean {\r\n        return !!this.value;\r\n    }\r\n\r\n    set checked(checked: boolean) {\r\n        this.valueUpdates.next(checked);\r\n    }\r\n\r\n    toggle(): void {\r\n        this.checked = !this.checked;\r\n    }\r\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\r\n\r\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\r\n\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\r\n\r\n    @serializable() indeterminate: boolean;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\r\n\r\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;\r\n    }\r\n}","export const AUTOCOMPLETE_OFF = \"off\";\r\nexport const AUTOCOMPLETE_ON = \"on\";\r\n\r\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\r\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\r\n\r\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\r\n\r\nexport const AUTOFILL_TOKEN_HOME = \"home\";\r\nexport const AUTOFILL_TOKEN_WORK = \"work\";\r\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\r\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\r\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\r\n\r\nexport const AUTOFILL_TOKENS_CONTACT = [\r\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\r\n];\r\n\r\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\r\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\r\n\r\nexport const AUTOFILL_FIELD_NAME = \"name\";\r\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\r\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\r\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\r\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\r\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\r\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\r\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\r\n\r\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\r\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\r\n\r\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\r\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\r\n\r\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\r\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\r\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\r\n\r\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\r\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\r\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\r\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\r\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\r\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\r\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\r\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\r\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\r\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\r\n\r\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\r\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\r\n\r\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\r\n\r\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\r\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\r\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\r\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\r\n\r\nexport const AUTOFILL_FIELD_SEX = \"sex\";\r\n\r\nexport const AUTOFILL_FIELD_URL = \"url\";\r\n\r\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\r\n\r\nexport const AUTOFILL_FIELDS = [\r\n\r\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\r\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\r\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\r\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\r\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\r\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\r\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\r\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\r\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\r\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\r\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\r\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\r\n];\r\n\r\nexport const AUTOFILL_FIELD_TEL = \"tel\";\r\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\r\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\r\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\r\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\r\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\r\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\r\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\r\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\r\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\r\n\r\nexport const AUTOFILL_FIELDS_CONTACT = [\r\n\r\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\r\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\r\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\r\n];\r\n\r\nexport class AutoFillUtils {\r\n\r\n    static isAddressToken(token: string): boolean {\r\n        return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\r\n    }\r\n\r\n    static isContactField(token: string): boolean {\r\n        return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\r\n    }\r\n\r\n    static isContactToken(token: string): boolean {\r\n        return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\r\n    }\r\n\r\n    static isField(token: string): boolean {\r\n        return AUTOFILL_FIELDS.indexOf(token) > -1;\r\n    }\r\n\r\n    static isSectionToken(token: string): boolean {\r\n        return token.startsWith(\"section-\");\r\n    }\r\n\r\n    static validate(tokens: string): boolean {\r\n\r\n        let toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`,\r\n            tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression),\r\n            tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression),\r\n            fields = AUTOFILL_FIELDS.reduce(toExpression),\r\n            fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression),\r\n            regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\r\n\r\n        return regex.test(tokens);\r\n    }\r\n}","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../decorator/serializable.decorator\";\r\nimport { AUTOCOMPLETE_ON } from \"../utils/autofill.utils\";\r\nimport { isBoolean, isNumber } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\r\n\r\n    autoComplete?: string;\r\n    autoFocus?: boolean;\r\n    maxLength?: number;\r\n    minLength?: number;\r\n    placeholder?: string;\r\n    prefix?: string;\r\n    readOnly?: boolean;\r\n    spellCheck?: boolean;\r\n    suffix?: string;\r\n}\r\n\r\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\r\n\r\n    @serializable() autoComplete: string;\r\n    @serializable() autoFocus: boolean;\r\n    @serializable() maxLength: number | null;\r\n    @serializable() minLength: number | null;\r\n    @serializable() placeholder: string;\r\n    @serializable() prefix: string | null;\r\n    @serializable() readOnly: boolean;\r\n    @serializable() spellCheck: boolean;\r\n    @serializable() suffix: string | null;\r\n\r\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;\r\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\r\n        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;\r\n        this.minLength = isNumber(config.minLength) ? config.minLength : null;\r\n        this.placeholder = config.placeholder || \"\";\r\n        this.prefix = config.prefix || null;\r\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\r\n        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;\r\n        this.suffix = config.suffix || null;\r\n    }\r\n}","import { isString } from \"./core.utils\";\r\n\r\nexport class JSONUtils {\r\n\r\n    static maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\r\n\r\n        if (isString(mask)) {\r\n\r\n            return mask as string;\r\n\r\n        } else if (mask instanceof RegExp) {\r\n\r\n            return mask.toString();\r\n\r\n        } else if (Array.isArray(mask)) {\r\n\r\n            return mask.map(value => JSONUtils.maskToString(value)) as string[];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\r\n\r\n        if (isString(mask)) {\r\n\r\n            let isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\r\n\r\n            return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\r\n\r\n        } else if (Array.isArray(mask)) {\r\n\r\n            return (mask as string[]).map(value => JSONUtils.maskFromString(value)) as string[];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static parseReviver(_key: string, value: any): any {\r\n\r\n        let regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\r\n\r\n        return isString(value) && regexDateISO.test(value) ? new Date(value) : value;\r\n    }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { JSONUtils } from \"../../utils/json.utils\";\r\nimport { isBoolean, isNumber, isObservable } from \"../../utils/core.utils\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { tap } from \"rxjs/operators\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\r\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\r\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\r\n\r\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\r\n\r\n    accept?: string;\r\n    inputType?: string;\r\n    list?: string[] | Observable<string[]>;\r\n    mask?: string | RegExp | (string | RegExp)[];\r\n    max?: number | string | Date;\r\n    min?: number | string | Date;\r\n    multiple?: boolean;\r\n    pattern?: string;\r\n    step?: number;\r\n}\r\n\r\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\r\n\r\n    @serializable() accept: string | null;\r\n    @serializable() inputType: string;\r\n    files: FileList | null = null;\r\n    list$: Observable<string[]> | null = null;\r\n    @serializable() mask: string | RegExp | (string | RegExp)[] | null;\r\n    @serializable() max: number | string | Date | null;\r\n    @serializable() min: number | string | Date | null;\r\n    @serializable() multiple: boolean | null;\r\n    @serializable() pattern: string | null;\r\n    @serializable() step: number | null;\r\n\r\n    @serializable(\"list\") private _list: string[] | null = null;\r\n    private readonly _listId: string | null = null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\r\n\r\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.accept = config.accept || null;\r\n        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\r\n        this.mask = config.mask || null;\r\n        this.max = config.max !== undefined ? config.max : null;\r\n        this.min = config.min !== undefined ? config.min : null;\r\n        this.multiple = isBoolean(config.multiple) ? config.multiple : null;\r\n        this.pattern = config.pattern || null;\r\n        this.step = isNumber(config.step) ? config.step : null;\r\n\r\n        if (config.list !== undefined) {\r\n\r\n            this.list = config.list;\r\n            this._listId = `${this.id}List`;\r\n        }\r\n    }\r\n\r\n    get listId(): string | null {\r\n        return this._listId;\r\n    }\r\n\r\n    get hasList(): boolean {\r\n        return isObservable(this.list$);\r\n    }\r\n\r\n    set list(list: string[] | Observable<string[]> | null) {\r\n\r\n        if (Array.isArray(list)) {\r\n\r\n            this._list = list;\r\n            this.list$ = of(this._list);\r\n\r\n        } else if (isObservable(list)) {\r\n\r\n            this.list$ = (list as Observable<string[]>).pipe(tap(list => this._list = list));\r\n\r\n        } else {\r\n\r\n            this._list = null;\r\n            this.list$ = null;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n\r\n        let json: any = super.toJSON();\r\n\r\n        if (this.mask !== null) { json.mask = JSONUtils.maskToString(this.mask); }\r\n\r\n        return json;\r\n    }\r\n}","export const DYNAMIC_FORM_CONTROL_ACTION_DISABLE = \"DISABLE\";\r\nexport const DYNAMIC_FORM_CONTROL_ACTION_ENABLE = \"ENABLE\";\r\nexport const DYNAMIC_FORM_CONTROL_ACTION_VISIBLE = \"VISIBLE\";\r\nexport const DYNAMIC_FORM_CONTROL_ACTION_HIDDEN = \"HIDDEN\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_CONNECTIVE_AND = \"AND\";\r\nexport const DYNAMIC_FORM_CONTROL_CONNECTIVE_OR = \"OR\";\r\n\r\nexport interface DynamicFormControlRelation {\r\n\r\n    id: string;\r\n    status?: string;\r\n    value?: any;\r\n}\r\n\r\nexport interface DynamicFormControlRelationGroup {\r\n\r\n    action: string;\r\n    connective?: string;\r\n    when: DynamicFormControlRelation[];\r\n}","import { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport {\r\n    DynamicFormControlRelation,\r\n    DynamicFormControlRelationGroup,\r\n    DYNAMIC_FORM_CONTROL_ACTION_DISABLE,\r\n    DYNAMIC_FORM_CONTROL_ACTION_ENABLE,\r\n    DYNAMIC_FORM_CONTROL_CONNECTIVE_AND,\r\n    DYNAMIC_FORM_CONTROL_CONNECTIVE_OR\r\n} from \"../model/misc/dynamic-form-control-relation.model\";\r\n\r\nexport class RelationUtils {\r\n\r\n    static findActivationRelation(relGroups: DynamicFormControlRelationGroup[]): DynamicFormControlRelationGroup | null {\r\n\r\n        let rel = relGroups.find(rel => {\r\n            return rel.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE || rel.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE;\r\n        });\r\n\r\n        return rel !== undefined ? rel : null;\r\n    }\r\n\r\n    static getRelatedFormControls(model: DynamicFormControlModel, controlGroup: FormGroup): FormControl[] {\r\n\r\n        let controls: FormControl[] = [];\r\n\r\n        model.relation.forEach(relGroup => relGroup.when.forEach(rel => {\r\n\r\n            if (model.id === rel.id) {\r\n                throw new Error(`FormControl ${model.id} cannot depend on itself`);\r\n            }\r\n\r\n            let control = controlGroup.get(rel.id) as FormControl;\r\n\r\n            if (control && !controls.some(controlElement => controlElement === control)) {\r\n                controls.push(control);\r\n            }\r\n        }));\r\n\r\n        return controls;\r\n    }\r\n\r\n    static isFormControlToBeDisabled(relGroup: DynamicFormControlRelationGroup, _formGroup: FormGroup): boolean {\r\n\r\n        let formGroup: FormGroup = _formGroup;\r\n\r\n        return relGroup.when.reduce((toBeDisabled: boolean, rel: DynamicFormControlRelation, index: number) => {\r\n\r\n            let control = formGroup.get(rel.id);\r\n\r\n            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE) {\r\n\r\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && !toBeDisabled) {\r\n                    return false;\r\n                }\r\n\r\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && toBeDisabled) {\r\n                    return true;\r\n                }\r\n\r\n                return rel.value === control.value || rel.status === control.status;\r\n            }\r\n\r\n            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE) {\r\n\r\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && toBeDisabled) {\r\n                    return true;\r\n                }\r\n\r\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && !toBeDisabled) {\r\n                    return false;\r\n                }\r\n\r\n                return !(rel.value === control.value || rel.status === control.status);\r\n            }\r\n\r\n            return false;\r\n\r\n        }, false);\r\n    }\r\n}","import {\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    EventEmitter,\r\n    OnChanges,\r\n    OnDestroy,\r\n    QueryList,\r\n    SimpleChange,\r\n    SimpleChanges,\r\n    Type,\r\n    ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { FormControl, FormGroup } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\nimport {\r\n    DynamicFormControlCustomEvent,\r\n    DynamicFormControlEvent,\r\n    DynamicFormControlEventType,\r\n    isDynamicFormControlEvent\r\n} from \"./dynamic-form-control.event\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\r\nimport {\r\n    DynamicFormArrayGroupModel,\r\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY\r\n} from \"../model/form-array/dynamic-form-array.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\r\nimport {\r\n    DynamicInputModel,\r\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\r\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE\r\n} from \"../model/input/dynamic-input.model\";\r\nimport {\r\n    DynamicFormControlLayout,\r\n    DynamicFormControlLayoutContext,\r\n    DynamicFormControlLayoutPlace\r\n} from \"../model/misc/dynamic-form-control-layout.model\";\r\nimport { DynamicFormControlRelationGroup } from \"../model/misc/dynamic-form-control-relation.model\";\r\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\r\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\r\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\r\nimport { RelationUtils } from \"../utils/relation.utils\";\r\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\r\nimport { isString } from \"../utils/core.utils\";\r\n\r\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\r\n\r\n    bindId: boolean;\r\n    context: DynamicFormArrayGroupModel | null = null;\r\n    control: FormControl;\r\n    group: FormGroup;\r\n    hasFocus: boolean;\r\n    layout: DynamicFormLayout;\r\n    model: DynamicFormControlModel;\r\n\r\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\r\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\r\n\r\n    blur: EventEmitter<DynamicFormControlEvent>;\r\n    change: EventEmitter<DynamicFormControlEvent>;\r\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\r\n    focus: EventEmitter<DynamicFormControlEvent>;\r\n\r\n    componentViewContainerRef: ViewContainerRef;\r\n\r\n    protected componentRef: ComponentRef<DynamicFormControl>;\r\n    protected componentSubscriptions: Subscription[] = [];\r\n    protected subscriptions: Subscription[] = [];\r\n\r\n    protected constructor(protected componentFactoryResolver: ComponentFactoryResolver,\r\n                          protected layoutService: DynamicFormLayoutService,\r\n                          protected validationService: DynamicFormValidationService) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n        let groupChange = changes[\"group\"] as SimpleChange,\r\n            modelChange = changes[\"model\"] as SimpleChange;\r\n\r\n        if (modelChange) {\r\n\r\n            this.destroyFormControlComponent();\r\n            this.createFormControlComponent();\r\n        }\r\n\r\n        if (groupChange || modelChange) {\r\n\r\n            if (this.model) {\r\n\r\n                this.unsubscribe();\r\n\r\n                if (this.group) {\r\n\r\n                    this.control = this.group.get(this.model.id) as FormControl;\r\n                    this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\r\n                }\r\n\r\n                this.subscriptions.push(this.model.disabledUpdates.subscribe(value => this.onModelDisabledUpdates(value)));\r\n\r\n                if (this.model instanceof DynamicFormValueControlModel) {\r\n\r\n                    let model = this.model as DynamicFormValueControlModel<any>;\r\n\r\n                    this.subscriptions.push(model.valueUpdates.subscribe(value => this.onModelValueUpdates(value)));\r\n                }\r\n\r\n                if (this.model.relation.length > 0) {\r\n                    this.setControlRelations();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n\r\n        this.destroyFormControlComponent();\r\n        this.unsubscribe();\r\n    }\r\n\r\n    abstract get componentType(): Type<DynamicFormControl> | null;\r\n\r\n    get errorMessages(): string[] {\r\n        return this.validationService.createErrorMessages(this.control, this.model);\r\n    }\r\n\r\n    get hasHint(): boolean {\r\n        return isString((this.model as DynamicFormValueControlModel<any>).hint);\r\n    }\r\n\r\n    get hasLabel(): boolean {\r\n        return isString(this.model.label);\r\n    }\r\n\r\n    get isCheckbox(): boolean {\r\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\r\n    }\r\n\r\n    get isInvalid(): boolean {\r\n        return this.control.invalid;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        return this.control.valid;\r\n    }\r\n\r\n    get showErrorMessages(): boolean {\r\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\r\n    }\r\n\r\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\r\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\r\n    }\r\n\r\n    get startTemplate(): DynamicTemplateDirective | undefined {\r\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\r\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\r\n    }\r\n\r\n    get endTemplate(): DynamicTemplateDirective | undefined {\r\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\r\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\r\n    }\r\n\r\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\r\n\r\n        let controlLayout = (this.layout && this.layout[model.id]) || model.layout as DynamicFormControlLayout;\r\n\r\n        return this.layoutService.getClass(controlLayout, context, place);\r\n    }\r\n\r\n    protected createFormControlComponent(): void {\r\n\r\n        let componentType = this.componentType;\r\n\r\n        if (componentType !== null) {\r\n\r\n            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\r\n\r\n            this.componentViewContainerRef.clear();\r\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\r\n\r\n            let instance = this.componentRef.instance;\r\n\r\n            instance.bindId = this.bindId;\r\n            instance.group = this.group;\r\n            instance.layout = this.layout;\r\n            instance.model = this.model as any;\r\n\r\n            if (this.templates) {\r\n                instance.templates = this.templates;\r\n            }\r\n\r\n            this.componentSubscriptions.push(instance.blur.subscribe(($event: any) => this.onBlur($event)));\r\n            this.componentSubscriptions.push(instance.change.subscribe(($event: any) => this.onChange($event)));\r\n            this.componentSubscriptions.push(instance.focus.subscribe(($event: any) => this.onFocus($event)));\r\n\r\n            if (instance.customEvent !== undefined) {\r\n                this.componentSubscriptions.push(\r\n                    instance.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected destroyFormControlComponent(): void {\r\n\r\n        if (this.componentRef) {\r\n\r\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\r\n            this.componentSubscriptions = [];\r\n\r\n            this.componentRef.destroy();\r\n        }\r\n    }\r\n\r\n    protected setControlRelations(): void {\r\n\r\n        let relActivation = RelationUtils.findActivationRelation(this.model.relation);\r\n\r\n        if (relActivation !== null) {\r\n\r\n            let rel = relActivation as DynamicFormControlRelationGroup;\r\n\r\n            this.updateModelDisabled(rel);\r\n\r\n            RelationUtils.getRelatedFormControls(this.model, this.group).forEach(control => {\r\n\r\n                this.subscriptions.push(control.valueChanges.subscribe(() => this.updateModelDisabled(rel)));\r\n                this.subscriptions.push(control.statusChanges.subscribe(() => this.updateModelDisabled(rel)));\r\n            });\r\n        }\r\n    }\r\n\r\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\r\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\r\n    }\r\n\r\n    updateModelDisabled(relation: DynamicFormControlRelationGroup): void {\r\n\r\n        this.model.disabledUpdates.next(RelationUtils.isFormControlToBeDisabled(relation, this.group));\r\n    }\r\n\r\n    unsubscribe(): void {\r\n\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    onControlValueChanges(value: any): void {\r\n\r\n        if (this.model instanceof DynamicFormValueControlModel) {\r\n\r\n            let model = this.model as DynamicFormValueControlModel<any>;\r\n\r\n            if (model.value !== value) {\r\n                model.valueUpdates.next(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    onModelValueUpdates(value: any): void {\r\n\r\n        if (this.control.value !== value) {\r\n            this.control.setValue(value);\r\n        }\r\n    }\r\n\r\n    onModelDisabledUpdates(value: boolean): void {\r\n        value ? this.control.disable() : this.control.enable();\r\n    }\r\n\r\n    onChange($event: Event | DynamicFormControlEvent | any): void {\r\n\r\n        if ($event && $event instanceof Event) { // native HTML5 change event\r\n\r\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\r\n\r\n                let model = this.model as DynamicInputModel;\r\n\r\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\r\n\r\n                    let inputElement: any = $event.target || $event.srcElement;\r\n\r\n                    model.files = inputElement.files as FileList;\r\n                }\r\n            }\r\n\r\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\r\n\r\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\r\n\r\n            this.change.emit($event);\r\n\r\n        } else { // custom library value change event\r\n\r\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\r\n        }\r\n    }\r\n\r\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\r\n\r\n        if (isDynamicFormControlEvent($event)) { // event bypass\r\n\r\n            this.blur.emit($event);\r\n\r\n        } else { // native HTML 5 or UI library blur event\r\n\r\n            this.hasFocus = false;\r\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\r\n        }\r\n    }\r\n\r\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\r\n\r\n        if (isDynamicFormControlEvent($event)) { // event bypass\r\n\r\n            this.focus.emit($event);\r\n\r\n        } else { // native HTML 5 or UI library focus event\r\n\r\n            this.hasFocus = true;\r\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\r\n        }\r\n    }\r\n\r\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\r\n\r\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\r\n\r\n        if (isDynamicFormControlEvent($event)) { // child event bypass\r\n\r\n            emitter.emit($event);\r\n\r\n        } else { // native UI library custom event\r\n\r\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\r\n        }\r\n    }\r\n}","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\r\nimport { DynamicTemplateableFormControl } from \"./dynamic-templateable-form-control.interface\";\r\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\r\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\r\nimport { isString } from \"../utils/core.utils\";\r\n\r\nexport abstract class DynamicTemplateableFormControlComponent extends DynamicFormControlComponent implements DynamicTemplateableFormControl, AfterViewInit {\r\n\r\n    readonly templateDirectives: Map<string, string>;\r\n\r\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\r\n\r\n    ngAfterViewInit() {\r\n\r\n        this.layoutService\r\n            .filterTemplatesByModel(this.model, this.templates)\r\n            .forEach(template => this.bindTemplate(template));\r\n    }\r\n\r\n    abstract get viewChild(): any;\r\n\r\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\r\n\r\n    bindTemplate(template: DynamicTemplateDirective) {\r\n\r\n        if (isString(template.as) && this.templateDirectives.has(template.as)) {\r\n\r\n            let property = this.templateDirectives.get(template.as) as string;\r\n\r\n            this.viewChild[property] = this.mapTemplate(template);\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[dynamicId]\"\r\n})\r\nexport class DynamicIdDirective implements AfterViewInit {\r\n\r\n    @Input() dynamicId: string | boolean;\r\n\r\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\r\n\r\n    ngAfterViewInit() {\r\n\r\n        if (this.dynamicId) {\r\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"id\", this.dynamicId as string);\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\r\nimport { isString } from \"../utils/core.utils\";\r\n\r\n@Directive({\r\n    selector: \"[dynamicList]\"\r\n})\r\nexport class DynamicListDirective implements AfterViewInit {\r\n\r\n    @Input(\"dynamicList\") listId: string | null;\r\n\r\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\r\n\r\n    ngAfterViewInit() {\r\n\r\n        if (isString(this.listId)) {\r\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"list\", this.listId as string);\r\n        }\r\n    }\r\n}","import { Directive, Input, TemplateRef } from \"@angular/core\";\r\n\r\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT { Start = \"START\", End = \"END\"}\r\n\r\n@Directive({\r\n    selector: \"ng-template[modelId],ng-template[modelType]\"\r\n})\r\nexport class DynamicTemplateDirective {\r\n\r\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\r\n    @Input() as: string | null = null;\r\n    @Input() modelId: string;\r\n    @Input() modelType: string;\r\n\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../decorator/serializable.decorator\";\r\n\r\nexport type DynamicDateControlValue = string | object | Date;\r\n\r\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\r\n\r\n    format?: string;\r\n    max?: DynamicDateControlValue;\r\n    min?: DynamicDateControlValue;\r\n    placeholder?: string;\r\n}\r\n\r\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\r\n\r\n    @serializable() format: string | null;\r\n    @serializable() max: DynamicDateControlValue | null;\r\n    @serializable() min: DynamicDateControlValue | null;\r\n    @serializable() placeholder: string | null;\r\n\r\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.format = config.format || null;\r\n        this.max = config.max || null;\r\n        this.min = config.min || null;\r\n        this.placeholder = config.placeholder || null;\r\n    }\r\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../decorator/serializable.decorator\";\r\nimport { isBoolean } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\r\n\r\n    multiple?: boolean;\r\n}\r\n\r\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\r\n\r\n    @serializable() multiple: boolean;\r\n\r\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\r\n    }\r\n}","import { Observable, of } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\r\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\r\nimport { isBoolean, isObservable } from \"../utils/core.utils\";\r\n\r\nexport interface DynamicFormOptionConfig<T> {\r\n\r\n    disabled?: boolean;\r\n    label?: string;\r\n    value: T;\r\n}\r\n\r\nexport class DynamicFormOption<T> {\r\n\r\n    @serializable() disabled: boolean;\r\n    @serializable() label: string | null;\r\n    @serializable() value: T;\r\n\r\n    constructor(config: DynamicFormOptionConfig<T>) {\r\n\r\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\r\n        this.label = config.label || null;\r\n        this.value = config.value;\r\n    }\r\n\r\n    get text() {\r\n        return this.label;\r\n    }\r\n\r\n    set text(text: string | null) {\r\n        this.label = text;\r\n    }\r\n\r\n    toJSON() {\r\n        return serialize(this);\r\n    }\r\n}\r\n\r\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\r\n\r\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\r\n}\r\n\r\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\r\n\r\n    @serializable(\"options\") private _options: DynamicFormOption<T>[] = [];\r\n    options$: Observable<DynamicFormOption<T>[]>;\r\n\r\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.options = config.options;\r\n    }\r\n\r\n    private updateOptions$(): void {\r\n        this.options$ = of(this.options);\r\n    }\r\n\r\n    set options(options: any) {\r\n\r\n        if (Array.isArray(options)) {\r\n\r\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => {\r\n                return new DynamicFormOption<T>(optionConfig);\r\n            });\r\n\r\n            this.updateOptions$();\r\n\r\n        } else if (isObservable(options)) { // replace with isObservable from rxjs in next major version\r\n\r\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\r\n                map(optionsConfig => {\r\n\r\n                    let options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\r\n\r\n                    this._options = options;\r\n\r\n                    return options;\r\n                }));\r\n\r\n        } else {\r\n\r\n            this.updateOptions$();\r\n        }\r\n    }\r\n\r\n    get options(): any {\r\n        return this._options;\r\n    }\r\n\r\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\r\n        return this.insert(this.options.length, optionConfig);\r\n    }\r\n\r\n    get(index: number): DynamicFormOption<T> {\r\n        return this.options[index];\r\n    }\r\n\r\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\r\n\r\n        let option = new DynamicFormOption(optionConfig);\r\n\r\n        this.options.splice(index, 0, option);\r\n        this.updateOptions$();\r\n\r\n        return option;\r\n    }\r\n\r\n    remove(...indices: number[]): void {\r\n\r\n        indices.forEach(index => this.options.splice(index, 1));\r\n        this.updateOptions$();\r\n    }\r\n\r\n    abstract select(...indices: number[]): void;\r\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\r\n\r\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\r\n\r\n    group?: DynamicFormControlModel[];\r\n    legend?: string;\r\n}\r\n\r\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\r\n\r\n    @serializable() group: DynamicFormControlModel[] = [];\r\n    @serializable() legend: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\r\n\r\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.group = Array.isArray(config.group) ? config.group : [];\r\n        this.legend = config.legend || null;\r\n    }\r\n\r\n    get(index: number): DynamicFormControlModel {\r\n        return this.group[index];\r\n    }\r\n\r\n    set(index: number, controlModel: DynamicFormControlModel,): void {\r\n        this.group[index] = controlModel;\r\n    }\r\n\r\n    add(controlModel: DynamicFormControlModel): void {\r\n        this.group.push(controlModel);\r\n    }\r\n\r\n    insert(index: number, controlModel: DynamicFormControlModel): void {\r\n        this.group.splice(index, 0, controlModel);\r\n    }\r\n\r\n    move(index: number, step: number): void {\r\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\r\n    }\r\n\r\n    remove(index: number) {\r\n        this.group.splice(index, 1);\r\n    }\r\n\r\n    size(): number {\r\n        return this.group.length;\r\n    }\r\n}","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\r\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\r\n\r\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\r\n\r\n    @serializable() group: DynamicCheckboxModel[];\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\r\n\r\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\r\n        super(config, layout);\r\n    }\r\n\r\n    check(...indices: number[]): void {\r\n        indices.forEach(index => this.group[index].checked = true);\r\n    }\r\n\r\n    uncheck(...indices: number[]): void {\r\n        indices.forEach(index => this.group[index].checked = false);\r\n    }\r\n\r\n    checkAll(): void {\r\n        this.group.forEach(model => model.checked = true);\r\n    }\r\n\r\n    uncheckAll(): void {\r\n        this.group.forEach(model => model.checked = false);\r\n    }\r\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean, isString } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\r\n\r\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\r\n\r\n    format?: string;\r\n    inline?: boolean;\r\n}\r\n\r\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\r\n\r\n    @serializable() format: string | null;\r\n    @serializable() inline: boolean;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\r\n\r\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.format = isString(config.format) ? config.format : null;\r\n        this.inline = isBoolean(config.inline) ? config.inline : false;\r\n    }\r\n}","import {\r\n    DynamicDateControlModel,\r\n    DynamicDateControlModelConfig,\r\n    DynamicDateControlValue\r\n} from \"../dynamic-date-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean, isString } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\r\n\r\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\r\n\r\n    autoFocus?: boolean;\r\n    focusedDate?: DynamicDateControlValue;\r\n    inline?: boolean;\r\n    prefix?: string;\r\n    readOnly?: boolean;\r\n    suffix?: string;\r\n    toggleIcon?: string;\r\n    toggleLabel?: string;\r\n}\r\n\r\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\r\n\r\n    @serializable() autoFocus: boolean;\r\n    @serializable() focusedDate: DynamicDateControlValue | null;\r\n    @serializable() inline: boolean;\r\n    @serializable() prefix: string | null;\r\n    @serializable() readOnly: boolean;\r\n    @serializable() suffix: string | null;\r\n    @serializable() toggleIcon: string | null;\r\n    @serializable() toggleLabel: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\r\n\r\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\r\n        this.focusedDate = config.focusedDate || null;\r\n        this.inline = isBoolean(config.inline) ? config.inline : false;\r\n        this.prefix = config.prefix || null;\r\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\r\n        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;\r\n        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;\r\n        this.suffix = config.suffix || null;\r\n    }\r\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\r\n\r\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\r\n}\r\n\r\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\r\n\r\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n    }\r\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\r\n\r\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\r\n\r\n    accept?: string[];\r\n    autoUpload?: boolean;\r\n    maxSize?: number;\r\n    minSize?: number;\r\n    removeUrl?: string;\r\n    showFileList?: boolean;\r\n    url?: string;\r\n}\r\n\r\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\r\n\r\n    @serializable() accept: string[] | null;\r\n    @serializable() autoUpload: boolean;\r\n    @serializable() maxSize: number | null;\r\n    @serializable() minSize: number | null;\r\n    @serializable() removeUrl: string | null;\r\n    @serializable() showFileList: boolean;\r\n    @serializable() url: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\r\n\r\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\r\n        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;\r\n        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;\r\n        this.minSize = isNumber(config.minSize) ? config.minSize : null;\r\n        this.removeUrl = config.removeUrl || null;\r\n        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;\r\n        this.url = config.url || null;\r\n    }\r\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\r\n\r\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\r\n\r\n    legend?: string;\r\n}\r\n\r\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\r\n\r\n    @serializable() legend: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\r\n\r\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.legend = config.legend || null;\r\n    }\r\n\r\n    select(index: number): void {\r\n        this.valueUpdates.next(this.get(index).value);\r\n    }\r\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isNumber } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\r\n\r\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\r\n\r\n    max?: number;\r\n}\r\n\r\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\r\n\r\n    @serializable() max: number | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\r\n\r\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.max = isNumber(config.max) ? config.max : 10;\r\n    }\r\n}","import { ɵlooseIdentical as looseIdentical } from \"@angular/core\";\r\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean, isFunction } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\r\n\r\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\r\n\r\n    compareWithFn?: (o1: any, o2: any) => boolean;\r\n    filterable?: boolean;\r\n    multiple?: boolean;\r\n    placeholder?: string;\r\n    prefix?: string;\r\n    suffix?: string;\r\n}\r\n\r\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\r\n\r\n    compareWithFn: (o1: any, o2: any) => boolean;\r\n    @serializable() filterable: boolean;\r\n    @serializable() multiple: boolean;\r\n    @serializable() placeholder: string;\r\n    @serializable() prefix: string | null;\r\n    @serializable() suffix: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\r\n\r\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;\r\n        this.filterable = isBoolean(config.filterable) ? config.filterable : false;\r\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\r\n        this.placeholder = config.placeholder || \"\";\r\n        this.prefix = config.prefix || null;\r\n        this.suffix = config.suffix || null;\r\n    }\r\n\r\n    select(...indices: number[]): void {\r\n\r\n        let value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\r\n\r\n        this.valueUpdates.next(value);\r\n    }\r\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\r\n\r\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\r\n\r\n    max?: number;\r\n    min?: number;\r\n    step?: number;\r\n    vertical?: boolean;\r\n}\r\n\r\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\r\n\r\n    @serializable() max: number | null;\r\n    @serializable() min: number | null;\r\n    @serializable() step: number | null;\r\n    @serializable() vertical: boolean;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\r\n\r\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.max = isNumber(config.max) ? config.max : 10;\r\n        this.min = isNumber(config.min) ? config.min : 0;\r\n        this.step = isNumber(config.step) ? config.step : 1;\r\n        this.vertical = isBoolean(config.vertical) ? config.vertical : false;\r\n    }\r\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\r\n\r\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\r\n\r\n    offLabel?: string;\r\n    onLabel?: string;\r\n}\r\n\r\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\r\n\r\n    @serializable() offLabel: string | null;\r\n    @serializable() onLabel: string | null;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\r\n\r\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.offLabel = config.offLabel || null;\r\n        this.onLabel = config.onLabel || null;\r\n    }\r\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isNumber } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\r\n\r\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\r\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\r\n\r\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\r\n\r\n    cols?: number;\r\n    rows?: number;\r\n    wrap?: string;\r\n}\r\n\r\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\r\n\r\n    @serializable() cols: number;\r\n    @serializable() rows: number;\r\n    @serializable() wrap: string;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\r\n\r\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.cols = isNumber(config.cols) ? config.cols : 20;\r\n        this.rows = isNumber(config.rows) ? config.rows : 2;\r\n        this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\r\n    }\r\n}","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\r\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\r\nimport { serializable } from \"../../decorator/serializable.decorator\";\r\nimport { isBoolean } from \"../../utils/core.utils\";\r\n\r\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\r\n\r\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\r\n\r\n    meridian?: boolean;\r\n    showSeconds?: boolean;\r\n}\r\n\r\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\r\n\r\n    @serializable() meridian: boolean;\r\n    @serializable() showSeconds: boolean;\r\n\r\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\r\n\r\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\r\n\r\n        super(config, layout);\r\n\r\n        this.meridian = isBoolean(config.meridian) ? config.meridian : false;\r\n        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;\r\n    }\r\n}","import { InjectionToken, Injectable, Inject, Optional } from \"@angular/core\";\r\nimport {\r\n    AbstractControl,\r\n    AsyncValidatorFn,\r\n    ValidatorFn,\r\n    Validators,\r\n    NG_VALIDATORS,\r\n    NG_ASYNC_VALIDATORS\r\n} from \"@angular/forms\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport {\r\n    DynamicValidatorDescriptor,\r\n    DynamicValidatorsConfig\r\n} from \"../model/misc/dynamic-form-control-validation.model\";\r\nimport { isObject, isString } from \"../utils/core.utils\";\r\n\r\nexport type Validator = ValidatorFn | AsyncValidatorFn;\r\n\r\nexport type ValidatorFactory = (args: any) => Validator;\r\n\r\nexport type ValidatorsToken = Validator[];\r\n\r\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\r\n\r\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DynamicFormValidationService {\r\n\r\n    constructor(@Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: ValidatorFn[],\r\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\r\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>) {}\r\n\r\n\r\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\r\n                           validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator | never {\r\n\r\n        let validatorFn: ValidatorFactory | Validator | undefined;\r\n\r\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\r\n\r\n            validatorFn = (Validators as any)[validatorName];\r\n\r\n        } else { // Custom Validators\r\n\r\n            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {\r\n                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);\r\n\r\n            } else if (validatorsToken) {\r\n                validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\r\n            }\r\n        }\r\n\r\n        if (validatorFn === undefined) { // throw when no validator could be resolved\r\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\r\n        }\r\n\r\n        if (validatorArgs !== null) {\r\n            return (validatorFn as ValidatorFactory)(validatorArgs);\r\n        }\r\n\r\n        return validatorFn as Validator;\r\n    }\r\n\r\n\r\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\r\n                            validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator[] {\r\n\r\n        let validatorFns: Validator[] = [];\r\n\r\n        if (isObject(validatorsConfig)) {\r\n\r\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\r\n\r\n                let validatorConfigValue = (validatorsConfig as DynamicValidatorsConfig)[validatorConfigKey];\r\n\r\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\r\n\r\n                    let descriptor = validatorConfigValue as DynamicValidatorDescriptor;\r\n\r\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\r\n                }\r\n\r\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\r\n            });\r\n        }\r\n\r\n        return validatorFns;\r\n    }\r\n\r\n\r\n    private parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\r\n\r\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\r\n\r\n            let propertySource: any = model,\r\n                propertyName: string = expression;\r\n\r\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\r\n\r\n                propertySource = error;\r\n                propertyName = expression.replace(\"validator.\", \"\");\r\n            }\r\n\r\n            return propertySource[propertyName] ? propertySource[propertyName] : null;\r\n        });\r\n    }\r\n\r\n\r\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\r\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\r\n    }\r\n\r\n\r\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\r\n        return this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\r\n    }\r\n\r\n\r\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\r\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\r\n    }\r\n\r\n\r\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\r\n        return this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\r\n    }\r\n\r\n\r\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\r\n                     model: DynamicFormControlModel): void {\r\n\r\n        model.validators = validatorsConfig;\r\n\r\n        if (validatorsConfig === null) {\r\n\r\n            control.clearValidators();\r\n\r\n        } else {\r\n            control.setValidators(this.getValidators(validatorsConfig));\r\n        }\r\n    }\r\n\r\n\r\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\r\n                          model: DynamicFormControlModel): void {\r\n\r\n        model.asyncValidators = asyncValidatorsConfig;\r\n\r\n        if (asyncValidatorsConfig === null) {\r\n\r\n            control.clearAsyncValidators();\r\n\r\n        } else {\r\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\r\n        }\r\n    }\r\n\r\n\r\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\r\n\r\n        let messages: string[] = [];\r\n\r\n        if (model.hasErrorMessages) {\r\n\r\n            let messagesConfig = model.errorMessages as DynamicValidatorsConfig;\r\n\r\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\r\n\r\n                let messageKey = validationErrorKey;\r\n\r\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\r\n                    messageKey = messageKey.replace(\"length\", \"Length\");\r\n                }\r\n\r\n                if (messagesConfig.hasOwnProperty(messageKey)) {\r\n\r\n                    let validationError = control.getError(validationErrorKey),\r\n                        messageTemplate = messagesConfig[messageKey] as string;\r\n\r\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\r\n                }\r\n            });\r\n        }\r\n\r\n        return messages;\r\n    }\r\n\r\n\r\n    isFormHook(value: any): boolean {\r\n        return isString(value) && [\"blur\", \"change\", \"submit\"].indexOf(value) !== -1;\r\n    }\r\n\r\n\r\n    isValidatorDescriptor(value: any): boolean {\r\n\r\n        if (isObject(value)) {\r\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\r\nimport { AbstractControlOptions, FormHooks } from \"@angular/forms/src/model\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\r\nimport {\r\n    DynamicFormArrayModel,\r\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\r\n    DynamicFormArrayGroupModel\r\n} from \"../model/form-array/dynamic-form-array.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\r\n    DynamicCheckboxGroupModel\r\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\r\n    DynamicColorPickerModel\r\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\r\n    DynamicDatePickerModel\r\n} from \"../model/datepicker/dynamic-datepicker.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\r\n    DynamicFileUploadModel\r\n} from \"../model/file-upload/dynamic-file-upload.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\r\n    DynamicRadioGroupModel\r\n} from \"../model/radio/dynamic-radio-group.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\r\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\r\nimport {\r\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\r\n    DynamicTimePickerModel\r\n} from \"../model/timepicker/dynamic-timepicker.model\";\r\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\r\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\r\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\r\nimport { JSONUtils } from \"../utils/json.utils\";\r\nimport { isString } from \"../utils/core.utils\";\r\n\r\nexport type DynamicFormModel = DynamicFormControlModel[] | DynamicFormGroupModel;\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DynamicFormService {\r\n\r\n    constructor(private validationService: DynamicFormValidationService) {}\r\n\r\n\r\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\r\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\r\n                                         updateOn: FormHooks | null = null): AbstractControlOptions {\r\n\r\n        return {\r\n\r\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\r\n\r\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\r\n\r\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : \"change\"\r\n        };\r\n    }\r\n\r\n\r\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\r\n\r\n        let controls: AbstractControl[] = [],\r\n            options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\r\n                formArrayModel.updateOn);\r\n\r\n        for (let index = 0; index < formArrayModel.size; index++) {\r\n\r\n            let groupModel = formArrayModel.get(index),\r\n                groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\r\n                    formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\r\n\r\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\r\n        }\r\n\r\n        return new FormArray(controls, options);\r\n    }\r\n\r\n\r\n    createFormGroup(formModel: DynamicFormControlModel[], options: AbstractControlOptions | null = null,\r\n                    parent: DynamicPathable | null = null): FormGroup {\r\n\r\n        let controls: { [controlId: string]: AbstractControl; } = {};\r\n\r\n        formModel.forEach(model => {\r\n\r\n            model.parent = parent;\r\n\r\n            switch (model.type) {\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\r\n\r\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\r\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\r\n\r\n                    let groupModel = model as DynamicFormGroupModel,\r\n                        groupOptions = this.createAbstractControlOptions(groupModel.validators,\r\n                            groupModel.asyncValidators, groupModel.updateOn);\r\n\r\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\r\n                    break;\r\n\r\n                default:\r\n\r\n                    let controlModel = model as DynamicFormValueControlModel<any>,\r\n                        controlState = {value: controlModel.value, disabled: controlModel.disabled},\r\n                        controlOptions = this.createAbstractControlOptions(controlModel.validators,\r\n                            controlModel.asyncValidators, controlModel.updateOn);\r\n\r\n                    controls[model.id] = new FormControl(controlState, controlOptions);\r\n            }\r\n        });\r\n\r\n        return new FormGroup(controls, options);\r\n    }\r\n\r\n\r\n    getPathSegment(model: DynamicPathable): string {\r\n\r\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\r\n    }\r\n\r\n\r\n    getPath(model: DynamicPathable): string[] {\r\n\r\n        let path = [this.getPathSegment(model)],\r\n            parent = model.parent;\r\n\r\n        while (parent) {\r\n\r\n            path.unshift(this.getPathSegment(parent));\r\n            parent = parent.parent;\r\n        }\r\n\r\n        return path;\r\n    }\r\n\r\n\r\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicFormModel, ...models: DynamicFormControlModel[]): void {\r\n\r\n        if (formModel instanceof DynamicFormGroupModel) {\r\n\r\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\r\n\r\n        } else {\r\n\r\n            let _formModel = formModel as DynamicFormControlModel[];\r\n            this.insertFormGroupControl(_formModel.length, formGroup, _formModel, ...models);\r\n        }\r\n    }\r\n\r\n\r\n    moveFormGroupControl(index: number, step: number, formModel: DynamicFormModel): void {\r\n\r\n        if (formModel instanceof DynamicFormGroupModel) {\r\n\r\n            formModel.move(index, step);\r\n\r\n        } else {\r\n\r\n            let _formModel = formModel as DynamicFormControlModel[];\r\n            _formModel.splice(index + step, 0, ..._formModel.splice(index, 1));\r\n        }\r\n    }\r\n\r\n\r\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicFormModel,\r\n                           ...models: DynamicFormControlModel[]): void {\r\n\r\n        let parent = formModel instanceof DynamicFormGroupModel ? formModel : null,\r\n            controls = this.createFormGroup(models, null, parent).controls;\r\n\r\n        Object.keys(controls).forEach((controlName, idx) => {\r\n\r\n            let controlModel = models[idx];\r\n\r\n            if (formModel instanceof DynamicFormGroupModel) {\r\n                formModel.insert(index, controlModel);\r\n\r\n            } else {\r\n                (formModel as DynamicFormControlModel[]).splice(index, 0, controlModel);\r\n            }\r\n\r\n            formGroup.addControl(controlName, controls[controlName]);\r\n        });\r\n    }\r\n\r\n\r\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicFormModel): void {\r\n\r\n        if (formModel instanceof DynamicFormGroupModel) {\r\n\r\n            formGroup.removeControl(formModel.get(index).id);\r\n            formModel.remove(index);\r\n\r\n        } else {\r\n\r\n            formGroup.removeControl(formModel[index].id);\r\n            (formModel as DynamicFormControlModel[]).splice(index, 1);\r\n        }\r\n    }\r\n\r\n\r\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\r\n\r\n        let groupModel = formArrayModel.addGroup();\r\n\r\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\r\n    }\r\n\r\n\r\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\r\n\r\n        let groupModel = formArrayModel.insertGroup(index);\r\n\r\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\r\n    }\r\n\r\n\r\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\r\n\r\n        let newIndex = index + step,\r\n            moveUp = step >= 0;\r\n\r\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\r\n\r\n            let movingGroups: AbstractControl[] = [];\r\n\r\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\r\n                movingGroups.push(formArray.at(i));\r\n            }\r\n\r\n            movingGroups.forEach((formControl, idx) => {\r\n\r\n                let position;\r\n\r\n                if (moveUp) {\r\n                    position = idx === 0 ? newIndex : index + idx - 1;\r\n\r\n                } else {\r\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\r\n                }\r\n\r\n                formArray.setControl(position, formControl);\r\n            });\r\n\r\n            formArrayModel.moveGroup(index, step);\r\n\r\n        } else {\r\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\r\n        }\r\n    }\r\n\r\n\r\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\r\n\r\n        formArray.removeAt(index);\r\n        formArrayModel.removeGroup(index);\r\n    }\r\n\r\n\r\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\r\n\r\n        while (formArray.length > 0) {\r\n            this.removeFormArrayGroup(0, formArray, formArrayModel);\r\n        }\r\n    }\r\n\r\n\r\n    findById(id: string, formModel: DynamicFormControlModel[]): DynamicFormControlModel | null {\r\n\r\n        let result = null,\r\n            findByIdFn = (id: string, groupModel: DynamicFormControlModel[]): void => {\r\n\r\n                for (let controlModel of groupModel) {\r\n\r\n                    if (controlModel.id === id) {\r\n                        result = controlModel;\r\n                        break;\r\n                    }\r\n\r\n                    if (controlModel instanceof DynamicFormGroupModel) {\r\n                        findByIdFn(id, (controlModel as DynamicFormGroupModel).group);\r\n                    }\r\n                }\r\n            };\r\n\r\n        findByIdFn(id, formModel);\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    fromJSON(json: string | object[]): DynamicFormControlModel[] | never {\r\n\r\n        let formModelJSON = isString(json) ? JSON.parse(json, JSONUtils.parseReviver) : json,\r\n            formModel: DynamicFormControlModel[] = [];\r\n\r\n        formModelJSON.forEach((model: any) => {\r\n\r\n            let layout = model.layout || model.cls || null; // remove model.cls in next major release\r\n\r\n            switch (model.type) {\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\r\n                    let formArrayModel = model as DynamicFormArrayModel;\r\n\r\n                    if (Array.isArray(formArrayModel.groups)) {\r\n\r\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\r\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormControlModel[];\r\n                        });\r\n                    }\r\n\r\n                    formArrayModel.groupFactory = () => {\r\n                        return this.fromJSON(formArrayModel.groupPrototype);\r\n                    };\r\n\r\n                    formModel.push(new DynamicFormArrayModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\r\n                    formModel.push(new DynamicCheckboxModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\r\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\r\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\r\n                    formModel.push(new DynamicColorPickerModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\r\n                    formModel.push(new DynamicDatePickerModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\r\n                    formModel.push(new DynamicEditorModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\r\n                    model.value = null;\r\n                    formModel.push(new DynamicFileUploadModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\r\n                    model.group = this.fromJSON(model.group);\r\n                    formModel.push(new DynamicFormGroupModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\r\n                    let inputModel = model as DynamicInputModel;\r\n\r\n                    if (inputModel.mask !== null) {\r\n                        inputModel.mask = JSONUtils.maskFromString(inputModel.mask as string);\r\n                    }\r\n\r\n                    formModel.push(new DynamicInputModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\r\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\r\n                    formModel.push(new DynamicRatingModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\r\n                    formModel.push(new DynamicSelectModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\r\n                    formModel.push(new DynamicSliderModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\r\n                    formModel.push(new DynamicSwitchModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\r\n                    formModel.push(new DynamicTextAreaModel(model, layout));\r\n                    break;\r\n\r\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\r\n                    formModel.push(new DynamicTimePickerModel(model, layout));\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\r\n            }\r\n        });\r\n\r\n        return formModel;\r\n    }\r\n}","import { Inject, Injectable, InjectionToken, Optional, QueryList, Type } from \"@angular/core\";\r\nimport {\r\n    DynamicFormControlLayout,\r\n    DynamicFormControlLayoutConfig,\r\n    DynamicFormControlLayoutContext,\r\n    DynamicFormControlLayoutPlace\r\n} from \"../model/misc/dynamic-form-control-layout.model\";\r\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\r\nimport { DynamicFormControl } from \"../component/dynamic-form-control.interface\";\r\nimport {\r\n    DynamicTemplateDirective,\r\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\r\n} from \"../directive/dynamic-template.directive\";\r\nimport { isObject } from \"../utils/core.utils\";\r\n\r\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\r\n\r\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\r\n\r\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\r\n\r\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class DynamicFormLayoutService {\r\n\r\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\r\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\r\n    }\r\n\r\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\r\n\r\n        if (isObject(formLayout)) {\r\n\r\n            for (let key of Object.keys(formLayout)) {\r\n\r\n                if (key === id) {\r\n                    return formLayout[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\r\n\r\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\r\n            return template.modelId === model.id || template.modelType === model.type;\r\n        };\r\n\r\n        if (templates instanceof QueryList) {\r\n            return templates.filter(filterCallback);\r\n\r\n        } else if (Array.isArray(templates)) {\r\n            return templates.filter(filterCallback);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates, alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\r\n\r\n        return this.filterTemplatesByModel(model, templates)\r\n            .find(template => template.as === null && template.align === alignment);\r\n    }\r\n\r\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\r\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\r\n    }\r\n\r\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\r\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\r\n    }\r\n\r\n    getClass(layout: DynamicFormControlLayout | null, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\r\n\r\n        if (layout !== null && layout.hasOwnProperty(context)) {\r\n\r\n            let config = layout[context] as DynamicFormControlLayoutConfig;\r\n\r\n            if (config.hasOwnProperty(place)) {\r\n                return config[place] as string;\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\r\n\r\n        if (this.DYNAMIC_FORM_CONTROL_MAP_FN) {\r\n            return this.DYNAMIC_FORM_CONTROL_MAP_FN(model);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { DynamicIdDirective } from \"./directive/dynamic-id.directive\";\r\nimport { DynamicListDirective } from \"./directive/dynamic-list.directive\";\r\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    declarations: [\r\n        DynamicIdDirective,\r\n        DynamicListDirective,\r\n        DynamicTemplateDirective\r\n    ],\r\n    exports: [\r\n        DynamicIdDirective,\r\n        DynamicListDirective,\r\n        DynamicTemplateDirective\r\n    ]\r\n})\r\nexport class DynamicFormsCoreModule {\r\n\r\n    //@deprecated\r\n    static forRoot(): ModuleWithProviders {\r\n        return {ngModule: DynamicFormsCoreModule};\r\n    }\r\n}"],"names":["value","isFunction","lift","subscribe","DynamicFormControlComponent","layoutService","validationService","this","Object","group","get","model","id","createErrorMessages","control","_hasFocus","invalid","valid","hasErrorMessages","touched","hasFocus","isInvalid","context","place","controlLayout","layout","getClass","$event","Event","stopPropagation","blur","emit","change","onChange","valueUpdates","next","checked","type","bypass","emitter","isString","customEvent","customEventType","focus","DynamicFormArrayComponent","__extends","getStartTemplate","templates","getEndTemplate","Blur","Change","Custom","Focus","isObject","hasOwnProperty","DynamicFormComponent","formService","_index","findById","formLayout","DynamicFormControlEventType","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","prototype","create","config","Promise","closed","errorObject","tryCatchTarget","fn","UnsubscriptionErrorImpl","Error","errors","name","Subscription","unsubscribe","hasErrors","_parent","_parents","index","e","UnsubscriptionError","isArray","_subscriptions","len","sub","err","teardown","subscription","subscriptions","subscriptionIndex","indexOf","parent","Math","Subscriber","_super","_this","destination","destinationOrNext","syncErrorThrowable","tslib_1.__extends","error","subscriber","isStopped","_next","_error","_complete","SafeSubscriber","observerOrNext","complete","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","syncErrorValue","wrappedComplete","syncErrorThrown","hostReportError","Observable","operator","observable","source","sink","nextOrObserver","_subscribe","_a","closed_1","canReportError","forEach","promiseCtor","reject","operations","length","fns","input","toPromise","getPromiseCtor","ObjectUnsubscribedErrorImpl","message","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","i","hasError","thrownError","asObservable","AnonymousSubject","RefCountOperator","connectable","refCounter","RefCountSubscriber","refCount","_refCount","connection","sharedConnection","getSubject","ConnectableSubscriber","connect","_isComplete","_subject","scheduler","array","add","result","args","_isScalar","MapOperator","project","MapSubscriber","thisArg","count","METADATA_KEY_SERIALIZABLE","target","key","Reflect","defineMetadata","serializables","metadata","getMetadata","push","getSerializables","reduce","prev","prop","asyncValidators","errorMessages","hidden","isBoolean","label","labelTooltip","controlTooltip","relation","updateOn","validators","disabled","disabledUpdates","DynamicFormControlModel","_disabled","serialize","serializable","additional","hint","required","tabIndex","undefined","DynamicFormValueControlModel","_value","defaultValue","$implicit","DynamicFormArrayGroupModel","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","groupFactory","groupAsyncValidators","groupPrototype","groupValidators","initialCount","isNumber","groups","arrayGroup","addGroup","DynamicFormArrayModel","insertGroup","splice","updateGroupIndex","step","labelPosition","DynamicCheckControlModel","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","indeterminate","AUTOFILL_TOKEN_BILLING","AUTOFILL_TOKEN_SHIPPING","AUTOFILL_TOKENS_ADDRESS","AUTOFILL_TOKENS_CONTACT","AUTOFILL_FIELD_STREET_ADDRESS","AUTOFILL_FIELD_ADDRESS_LINE_1","AUTOFILL_FIELD_ADDRESS_LINE_2","AUTOFILL_FIELD_ADDRESS_LINE_3","AUTOFILL_FIELD_ADDRESS_LEVEL_4","AUTOFILL_FIELD_ADDRESS_LEVEL_3","AUTOFILL_FIELD_ADDRESS_LEVEL_2","AUTOFILL_FIELD_ADDRESS_LEVEL_1","AUTOFILL_FIELD_HONORIFIC_PREFIX","AUTOFILL_FIELD_GIVEN_NAME","AUTOFILL_FIELD_ADDITIONAL_NAME","AUTOFILL_FIELD_FAMILY_NAME","AUTOFILL_FIELD_HONORIFIC_SUFFIX","AUTOFILL_FIELD_NICKNAME","AUTOFILL_FIELD_USERNAME","AUTOFILL_FIELD_NEW_PASSWORD","AUTOFILL_FIELD_CURRENT_PASSWORD","AUTOFILL_FIELD_ORGANIZATION_TITLE","AUTOFILL_FIELD_ORGANIZATION","AUTOFILL_FIELD_COUNTRY","AUTOFILL_FIELD_COUNTRY_NAME","AUTOFILL_FIELD_POSTAL_CODE","AUTOFILL_FIELD_CC_NAME","AUTOFILL_FIELD_CC_GIVEN_NAME","AUTOFILL_FIELD_CC_ADDITIONAL_NAME","AUTOFILL_FIELD_CC_FAMILY_NAME","AUTOFILL_FIELD_CC_NUMBER","AUTOFILL_FIELD_CC_EXP_MONTH","AUTOFILL_FIELD_CC_EXP_YEAR","AUTOFILL_FIELD_CC_TYPE","AUTOFILL_FIELD_TRANSACTION_CURRENCY","AUTOFILL_FIELD_TRANSACTION_AMOUNT","AUTOFILL_FIELD_LANGUAGE","AUTOFILL_FIELD_BDAY_DAY","AUTOFILL_FIELD_BDAY_MONTH","AUTOFILL_FIELD_BDAY_YEAR","AUTOFILL_FIELDS","AUTOFILL_FIELD_TEL_COUNTRY_CODE","AUTOFILL_FIELD_TEL_NATIONAL","AUTOFILL_FIELD_TEL_AREA_CODE","AUTOFILL_FIELD_TEL_LOCAL","AUTOFILL_FIELD_TEL_LOCAL_PREFIX","AUTOFILL_FIELD_TEL_LOCAL_SUFFIX","AUTOFILL_FIELD_TEL_LOCAL_EXTENSION","AUTOFILL_FIELDS_CONTACT","AutoFillUtils","token","startsWith","tokens","toExpression","total","currentValue","tokensAddress","tokensContact","fields","fieldsContact","RegExp","test","autoComplete","autoFocus","maxLength","minLength","placeholder","prefix","readOnly","spellCheck","suffix","JSONUtils","mask","toString","map","maskToString","endsWith","slice","maskFromString","_key","Date","DoOperator","TapSubscriber","noop","_tapComplete","_tapError","_tapNext","DYNAMIC_FORM_CONTROL_TYPE_INPUT","accept","inputType","max","min","multiple","pattern","list","_listId","DynamicInputModel","isObservable","list$","_list","of","pipe","json","toJSON","DynamicInputControlModel","DYNAMIC_FORM_CONTROL_ACTION_DISABLE","DYNAMIC_FORM_CONTROL_ACTION_ENABLE","RelationUtils","relGroups","rel","find","action","controlGroup","controls","relGroup","when","some","controlElement","_formGroup","formGroup","toBeDisabled","connective","status","DynamicFormControlContainerComponent","componentFactoryResolver","changes","groupChange","modelChange","destroyFormControlComponent","createFormControlComponent","valueChanges","onControlValueChanges","onModelDisabledUpdates","onModelValueUpdates","setControlRelations","inputTemplateList","contentTemplateList","componentType","componentFactory","resolveComponentFactory","componentViewContainerRef","clear","componentRef","createComponent","instance","bindId","componentSubscriptions","onBlur","onFocus","onCustomEvent","destroy","relActivation","findActivationRelation","rel_1","updateModelDisabled","getRelatedFormControls","statusChanges","isFormControlToBeDisabled","setValue","disable","enable","inputElement","srcElement","files","createDynamicFormControlEvent","isDynamicFormControlEvent","DynamicTemplateableFormControlComponent","filterTemplatesByModel","template","bindTemplate","as","templateDirectives","has","property","viewChild","mapTemplate","elementRef","renderer","DynamicIdDirective","dynamicId","setAttribute","nativeElement","Directive","selector","ElementRef","Renderer2","Input","DynamicListDirective","listId","Start","End","templateRef","DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT","TemplateRef","format","DynamicFormOption","text","T","options","DynamicOptionControlModel","options$","_options","optionConfig","updateOptions$","optionsConfig","insert","option","_i","indices","DYNAMIC_FORM_CONTROL_TYPE_GROUP","legend","DynamicFormGroupModel","controlModel","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DynamicCheckboxGroupModel","DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER","inline","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","focusedDate","toggleIcon","toggleLabel","DynamicDateControlModel","DYNAMIC_FORM_CONTROL_TYPE_EDITOR","DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD","autoUpload","maxSize","minSize","removeUrl","showFileList","url","DynamicFileControlModel","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DynamicRadioGroupModel","DYNAMIC_FORM_CONTROL_TYPE_RATING","DYNAMIC_FORM_CONTROL_TYPE_SELECT","compareWithFn","looseIdentical","filterable","DynamicSelectModel","DYNAMIC_FORM_CONTROL_TYPE_SLIDER","vertical","DYNAMIC_FORM_CONTROL_TYPE_SWITCH","offLabel","onLabel","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","cols","rows","wrap","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","meridian","showSeconds","DYNAMIC_VALIDATORS","InjectionToken","NG_VALIDATORS","NG_ASYNC_VALIDATORS","DynamicFormValidationService","validatorName","validatorArgs","validatorsToken","validatorFn","Validators","validatorsConfig","validatorFns","keys","validatorConfigKey","validatorConfigValue","isValidatorDescriptor","descriptor","getValidatorFn","replace","_match","expression","propertySource","propertyName","getValidatorFns","asyncValidatorsConfig","clearValidators","setValidators","getValidators","clearAsyncValidators","setAsyncValidators","getAsyncValidators","messages","messagesConfig_1","validationErrorKey","messageKey","validationError","getError","messageTemplate","parseErrorMessageConfig","Injectable","providedIn","Optional","Inject","Map","DynamicFormService","isFormHook","formArrayModel","createAbstractControlOptions","size","groupModel","groupOptions","createFormGroup","FormArray","formModel","createFormArray","controlState","controlOptions","FormControl","FormGroup","path","getPathSegment","unshift","models","insertFormGroupControl","_formModel","move","controlName","idx","addControl","removeControl","remove","formArray","newIndex","moveUp","movingGroups_1","at","formControl","position","setControl","moveGroup","removeAt","removeGroup","removeFormArrayGroup","findByIdFn","groupModel_1","formModelJSON","JSON","parse","parseReviver","cls","formArrayModel_1","fromJSON","DynamicCheckboxModel","DynamicColorPickerModel","DynamicDatePickerModel","DynamicEditorModel","DynamicFileUploadModel","inputModel","DynamicRatingModel","DynamicSliderModel","DynamicSwitchModel","DynamicTextAreaModel","DynamicTimePickerModel","DYNAMIC_FORM_CONTROL_MAP_FN","DynamicFormLayoutService","filterCallback","modelId","modelType","QueryList","filter","alignment","align","getAlignedTemplate","DynamicFormsCoreModule","ngModule","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","DynamicTemplateDirective","exports"],"mappings":"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"}